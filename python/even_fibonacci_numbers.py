import unittest

"""

Each new term in the Fibonacci sequence is generated by adding the previous two terms.

By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

"""


def fib(upper_bound):
    """
    Generator for fibbonacci numbers
    :return:
    """

    a = 1
    b = 2
    while b < upper_bound:
        a, b = b, a + b
        yield a


def solution(upper_bound):
    """
    Solution
    :param upper_bound:
    :return: the sum of the even-valued terms.
    """

    return sum(n for n in fib(upper_bound) if n % 2 == 0)


class TestEvenFibonacciNumbers(unittest.TestCase):

    def test_for_4m(self):
        self.assertEqual(solution(4 * pow(10, 6)), 4613732)

    def test_for_89(self):
        self.assertEqual(solution(89), 44)

    def test_for_0(self):
        self.assertEqual(solution(0), 0)

    def test_for_3(self):
        self.assertEqual(solution(3), 2)


if __name__ == '__main__':
    unittest.main()
